{
    "bitwise": true,

    /*
     Все переменные должны быть в стиле camelCase и UPPER_CASE
     */
    "camelcase": true,

    /*
     Этот параметр заставляет всегда тело условий и циклов заключать в фигурные скобки. JavaScript позволяет опускать фигурные скобки, когда блок состоит только из одного оператора, к примеру:
     while (day)
     shuffle();
     Однако, в некоторых случаях такая конструкция может привести к ошике:
     while (day)
     shuffle();
     sleep(); // Можно подумать, что это часть цикла, но это не так.
     Вообще, если вы аккуратно пишите код, то лучше всегда требовать обрамлять блоки скобками.
     */
    "curly": true,

    /*
     Этот параметр запрещает использовать == и != в пользу === и !==. Эти операторы пытаются всегда приводить операнды к одному типу, в результате чего можно получить неожиданный результат. Последние не делают приведения, следовательно являются более безопасными. Если вы хотите узнать больше о приведении типов в JavaScript, рекомендуем ознакомиться с Truth, Equality and JavaScript (Angus Crol).
     Примечание: даже если этот параметр выключен, JSHint все равно будет проверять небезопасное сравнение вида != null, если eqnull (см. ниже) включён!
     */
    "eqeqeq": false,

    /*
     Use this option if you need your program to be executable in older browsers—such as Internet Explorer 6/7/8/9—and other legacy JavaScript environments.
     */
    "es3": false,

    /*
     Этот параметр требует, чтобы во всех for in циклах выбирались только элементы объекта. Цикл for in перебирает все свойства объекта, в том числе и унаследованные. Это может привести к получению неожиданного свойства объекта. Обычно безопаснее фильтровать унаследованные свойства, например:
     for (key in obj) {
     if (obj.hasOwnProperty(key)) {
     // Мы уверены, что obj[key] относится к текущему обхекту, а не унаследован.
     }
     }
     Для лучшего понимания for in циклов в JavaScript, прочтите Exploring JavaScript for-in loops (Angus Croll).
     */
    "forin": true,

    /*
     This options prohibits overwriting prototypes of native objects such as Array, Date and so on.
     */
    "freeze": false,

    /*
     Обязывает оборачивать моментально вызываемые функции в скобки. Таким образом читающему становится ясно, что фишка в вызове функции, а не в ее определении (при этом ясно как читая с начала, так и с конца определения).
     */
    "immed": true,

    "indent": 4,

    /*
     Этот параметр запрещает использование переменных до их объявления. JavaScrit позволяет объявлять переменные в любом месте, при этом, при исполнении кода, они все поднимаются в самый верх. Такое поведение может привести к непонятным ошибкам, поэтому использование этого параметра делает код более безопасным, разрешая использовать переменные только после их явного предварительного объявления.
     Для лучшего понимания области видимости переменных и их объявлении в JavaScrip, прочтите JavaScript Scoping and Hoisting (Angus Croll).
     */
    "latedef": true,

    /*
     Этот параметр требует обязательно использовать оператор new перед функциями — конструкторами. Тк функции — конструкторы объявляются как и обычные функции, есть возможность вызвать такую функцию на исполнение, вместо того, чтобы создать объект, это, зачастую, является ошибкой, в особенности, когда в теле функции присутствует this.
     Отсутствие оператора new не вызовет никаких ошибок исполнения, и выявление такой ошибки будет затруднительным. А ошибка будет серьёзной, тк при вызове функции без оператора new, указатель this будет указывать не на создаваемый объект, а на глобальный.
     */
    "newcap": true,

    /*
     Этот параметр запрещает использование arguments.caller и arguments.callee. При их использовании, становится невозможным использовать множество оптимизаций, поэтому они объявлены устаревшими в новых версиях JavaScript. Также EcmaScript 5 запрещает использовать argumants.callee в строгом режиме.
     */
    "noarg": true,

    /*
     Этот параметр предупреждает, если в коде есть пустой блок. HSLint всегда делал такие предупреждения, мы сделали этот опциональным. В любом случае, не было случаев, чтобы пустой блок приводил к ошибке в программе.
     */
    "noempty": true,

    /*
     This option warns about "non-breaking whitespace" characters. These characters can be entered with option-space on Mac computers and have a potential of breaking non-UTF8 web pages.
     */
    "nonbsp": true,

    /*
     Этот параметр запрещает вызывать конструктор, создавая объект, но нигде его не сохранив. Некоторые вызывают конструктор, не сохранив созданный объект в переменной, к примеру так:
     new MyConstructor();
     Такой подход не имеет смысла, поэтому вы должны избегать таких конструкций.
     */
    "nonew": true,

    /*
     Этот параметр запрещает использование унарных операторов инкремента и декремента. Некоторые считают, что использование ++ и — — это плохой стиль программирования, к примеру разработчики на Python, где такие операторы отсутствуют.
     */
    "plusplus": false,

    "quotmark": "single",

    /*
     Присвоение неопределенной переменной выдаст ошибку. В нестрогом режиме в таком случае создает глобальная переменная
     */
    "undef": true,

    "unused": true,

    "strict": true,

    /*
     Этот параметр будет выдавать ошибку в случае, когда у вас в конце строки есть пробелы.
     */
    "trailing": true,

    //"maxparams": 3,

    //"maxdepth": 2,

    //"maxstatements":4,

    //"maxcomplexity": false,

    //"maxlen": false

    /*
     Принуждает к расстановке точек с запятой. Стандарт говорит, что точку с запятой ставить не обязательно, интерпретатор самостоятельно их расставит. Правда сделать это он может неоднозначно. Код ниже приведет к ошибке из-за отсутствия точки с запятой после объявления объекта. Подобную неожиданность можно встретить при конкатенации файлов, при длинном объявлении объекта или при большом расстоянии между объявлением объекта и вызовом функции (в виде комментария, например). Одно из решений — всегда ставить точку с запятой перед вызовом анонимной функции.
     */
    "asi": false,

    /*
     Этот праметр подавляет сообщения об ошибке в случае, когда ожидается сравнение, но его не происходит. Чаще всего код вида if (a = 10) {} является опечаткой.
     */
    "boss": false,

    "debug": false,

    "eqnull": false,

    "esnext": false,

    "evil": false,

    "expr": false,

    "funcscope": false,

    "gcl": false,

    "globalstrict": false,

    "iterator": false,

    "lastsemic": false,

    "laxbreak": false,

    "laxcomma": false,

    "loopfunc": false,

    //"maxerr": 50,

    //"moz": false,

    "multistr": false,

    "notypeof": false,

    "proto": false,

    "scripturl": false,

    "smarttabs": false,

    "shadow": false,

    "sub": false,

    "supernew": false,

    "validthis": false,

    //Environments
    "devel": true,

    "browser": true,

    "jquery": true,

    "node": true,

    "globals" : {
        "jQuery": true,
        "Modernizr": true
    }
}
